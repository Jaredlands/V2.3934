# Compute smoothed quadratic derivative of bed_power
# based on Savitzky-Golay algorithm
[gcode_macro _bed_power]
variable_min_vals: 9 #Min buffer length
variable_max_vals: 31 #Max buffer length
variable_interval: 3  #interval between measurements in s
variable_buffer: []   #stored power values
variable_d: {'val':0}
variable_is_stable: False
variable_stability: 5.0E-5 # Asbolute varition of Power to consider it as stable in percent/s
gcode:
    {% set async = (params.ASYNC|default('true')|lower != 'false') %} #Used by print start

    {% if not is_stable %}
        
        {% if buffer|length > min_vals %} 
            {% set _=d.update({'val':0}) %}
        # normalize sample (size should be odd number)
            {% set half_window = ((buffer|length -1 )/2)|int %}
            {% set window_size = half_window*2 +1 %}
            {% set inc = 1 - (buffer|length % 2) %}  # 0 for odd, 1 for evens
            {% set norm = window_size * (window_size + 1) * 2 * interval %}  # Normalization factor

        # Compute Smoothed Quadratic derivative of center value
            {% for i in range(window_size) %}
                {% set _=d.update({'val':0 + d.val + buffer[i + inc]*(i-half_window)/norm}) %}
            {% endfor %}

            _RESPOND VERBOSE=True MSG="Bed power variation {"%.2f" % (d.val*6000)}%/min, nb of samples: {window_size}" 
        {%endif %}
        
        # Test if stability is reached
        {% if printer.heater_bed.target != 0
            and printer.heater_bed.power < printer.configfile.settings['heater_bed'].max_power*0.75
            and d.val != 0
            and d.val|abs < stability %}

            _RESPOND VERBOSE=True MSG="Bed power reached stabilization {d.val*100}%/s"
            SET_GCODE_VARIABLE MACRO=_bed_power VARIABLE=is_stable VALUE=True
           
            {% if async %}
                _bed_power_reset ALL=True
                RESUME
            {% else %}
                _bed_power_reset
            {% endif %}              
        
        {% else %}

            SET_GCODE_VARIABLE MACRO=_bed_power VARIABLE=is_stable VALUE=False
            {% if async %}
                UPDATE_DELAYED_GCODE ID=_bed_power_delayed DURATION={interval}
            {% else %}
                G4 P{interval * 1000}
                _bed_power_populate_buffer
            {% endif %}

        {% endif %}
    {% endif %}


[gcode_macro _bed_power_populate_buffer]
gcode:
    {% set _vars = printer['gcode_macro _bed_power'] %}
    {% set pow= printer.heater_bed.power|float %}
    {% set _= _vars.buffer.append(pow) %}
    {% if _vars.buffer|length > (_vars.max_vals) %}
       {% set _= _vars.buffer.pop(0) %}
    {% endif %}
    SET_GCODE_VARIABLE MACRO=_bed_power VARIABLE=buffer VALUE='{_vars.buffer}'


[gcode_macro _bed_power_reset]
gcode:
    SET_GCODE_VARIABLE MACRO=_bed_power VARIABLE=buffer VALUE='[]'
    SET_GCODE_VARIABLE MACRO=_bed_power VARIABLE=d VALUE='{ {'val':0}|tojson|string }'
    {% if params.ALL|lower == 'true' %}
        SET_GCODE_VARIABLE MACRO=_bed_power VARIABLE=is_stable VALUE=False
    {% endif %}


# Delayed gcode to populate buffer
[delayed_gcode _bed_power_delayed]
gcode:
    {% set _vars = printer['gcode_macro _bed_power'] %}
    _bed_power_populate_buffer
    
    {% if printer.heater_bed.target > 0 and not _vars.is_stable %}
        _bed_power
    {% endif %}