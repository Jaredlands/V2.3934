# Compute smoothed quadratic derivative of bed_power
# based on Savitzky-Golay algorithm
[gcode_macro _bed_power]
variable_min_vals: 7 #Min buffer length
variable_max_vals: 51 #Max buffer length
variable_interval: 3  #intervel between measurements in s
variable_buffer: []   #stored power value
variable_d: {'val':0}
variable_is_stable: False
variable_stability: 0.0012 # Asbolute value of d to consider pow as stable
gcode:
    {% if params.RESET %}
        _RESPOND VERBOSE=True MSG="Reset _bed_power"
        {% set _=d.update({'val':0}) %}
        SET_GCODE_VARIABLE MACRO=_bed_power VARIABLE=buffer VALUE='[]'
    {% else %}
        {% if buffer|length > min_vals %} 
            {% set _=d.update({'val':0}) %}
            {% set half_window = ((buffer|length -1 )/2)|int %}
            {% set window_size = half_window*2 +1 %}
            {% set inc = 1 - (buffer|length % 2) %}  # 0 for odd, 1 for evens
            {% set norm = window_size * (window_size + 1) * 2 * interval %}  # Normalization factor

            # Compute Smoothed Quadratic derivative of center value
            {% for i in range(half_window + 1) %}
                {% set _=d.update({'val':0 + d.val + (buffer[i + inc]*(i-half_window) + buffer[half_window + i + inc]*(i))/norm }) %}
            {% endfor %}
            # Filter to small values due to floating point calculation
            {% set _=d.update({'val': d.val if d.val|abs > 1E-10 else 0}) %}
            _RESPOND VERBOSE=True MSG="Smoothed derivative value of Pow : {d.val}" 
        {%endif %}
        
        {% if printer.heater_bed.target > 0
            and printer.heater_bed.power < printer.configfile.settings['heater_bed'].max_power*0.75
            and d.val != 0 
            and d.val|abs < stability %}
                _RESPOND VERBOSE=True MSG="Bed Heater power reached stabilization"
                SET_GCODE_VARIABLE MACRO=_bed_power VARIABLE=is_stable VALUE=True
                UPDATE_DELAYED_GCODE ID=_bed_power_delayed DURATION=1
                RESUME               
        {% else %}
            UPDATE_DELAYED_GCODE ID=_bed_power_delayed DURATION={interval}
            SET_GCODE_VARIABLE MACRO=_bed_power VARIABLE=is_stable VALUE=False
            
        {% endif %}
    {% endif %}

# Delayed gcode to populate buffer
[delayed_gcode _bed_power_delayed]
gcode:
    {% set _vars = printer['gcode_macro _bed_power'] %}
    {% set pow= printer.heater_bed.power|float %}
    {% set _= _vars.buffer.append(pow) %}
    {% if _vars.buffer|length > (_vars.max_vals) %}
       {% set _= _vars.buffer.pop(0) %}
    {% endif %}
    SET_GCODE_VARIABLE MACRO=_bed_power VARIABLE=buffer VALUE='{_vars.buffer}'
    {% if printer.heater_bed.target > 0 and not _vars.is_stable %}
        _bed_power
    {% else %}
        _bed_power RESET=True    
    {% endif %}