########################
######  MMU-RPG   ######
########################
# Written by fboc#1751 #
# @version: 1.0beta

# CHANGELOG:
#   v1.0beta: beta release

## What is it ?
#  The aim of these macros is to help to automatically determine the Max flow
#  of your Hotend/nozzle/filament.
#  This work is largely inspired from the work of Stephan from CNCKitchen
#  https://www.cnckitchen.com/blog/extrusion-system-benchmark-tool-for-fast-prints

## What does MMU-RPG mean ?
#  It stands for Multi material Unit rabbit poopies generator

## Requirements :
#  - Filament_motion_sensor by Tircown configured or ERCF
#  https://github.com/elpopo-eng/VoronFrenchUsers/tree/main/Mod/Filament_motion_sensor 
#  - ercf.py installed (old or toolhead-sensorless)
#  https://github.com/EtteGit/EnragedRabbitProject
#  I have done a motion_sensor_only version for those who do not own ERCF yet
#  - Your e-step should be correctly tuned

## What does it ?
#  The MAX_FLOW produces plastic poops at different flows/temperatures and
#  determine drop down range.
#  It is parametric, though you can adapt inputs to your printer.

## Is it accurate ?
#  filament_motion_sensor use a TCRT5000 to count Bontech BMG teeth.
#  The step of measurement is about 1.38 mm. This is the accuracy you can
#  expect for a well printed and built sensor. 
#  The default extrusion of a "rabbit poopy" is 200 mm and the standard
#  deviation is about 0.7mm (0.35 %).
#  To get the same accuracy with a scale, a 0.005g precision is required. But
#  you should also consider reverse bowden strength, filament elasticity that
#  introduce inaccuracy in measurement.
#  If you consider dropdown target at 5% (10 mm skip) it is about 14 steps of
#  sensor with a range of 1 or 2 steps of errors.
#  CONCLUSION : That should do the job ! 

## How to install ?
#   - Copy this max_flow.cfg and include it in your Klipper config
#   DO BELOW STEPS ONLY if ERCF is not installed BUT ONLY a filament motion
#   sensor
#   - Copy ercf.py in ~/klipper/klippy/extras/ (motion-sensor-only version)
#   - add the following sections in your config replace ENC_PIN with your
#     motion_sensor pin

#     [duplicate_pin_override]
#     pins: ENC_PIN
#
#     [filament_motion_sensor encoder_sensor]
#     switch_pin: ^ENC_PIN
#     detection_length: 5.0
#     extruder: extruder
# 
#     [ercf]
#     encoder_pin: ^ENC_PIN

## Usage:
#   First you should calibrate your Encoder with your extruder. Use
#   ENCODER_CALIBRATION. Hit the command in your console, and read carefully
#   the displayed requirements.
#   MAX_FLOW_CALIBRATION <Settings=VALUE ... >
#   Settings are listed below
#    - AREA: x1,y1,x2,y2 define area where poops are printed default values
#      are min_x,min_y,max_x,max_y from configfile with 10mm margin
#    - START_FLOW: first flow to test in mm^3/s, default is 4
#    - END_FLOW: last flow to test in mm^3/s, default is 16
#    - FLOW_SAMPLES: number of flow test, determine flow step, default is 6
#    - FILAMENT_DIAMETER: default 1.75mm
#    - TEMPERATURES: coma separated values of temperature to test
#      default (200,220,240), test starts with higher temperature
#    - POOP_EXTRUSION: mm of filament to extrude , default is 200 mm, 
#      lower should be inaccurate (see above)
#    - POOP_HEIGHT: z lift height during extrusion, default is 10mm
#    - PRIME_AMOUNT: mm of extrude default if 10
#    - PRIME_SPEED: mm/s default is 15
#    - WIPE_LENGTH: mm, default is 9
#    - RETRACTION_LENGTH: mm default is 1
#    - RETRACTION_SPEED : mm/s, default is 60
#   
#    - FLOW_SPACING: default is 44mm
#    - TEMPERATURE_SPACING: default is 44mm 
#    
#    - DROPDOWN_ALERT: % of missing length default is 5
#    - ABORT_ON_DROPDOWN : Boolean , default is False

[gcode_macro MAX_FLOW_CALIBRATION]
variable_vars:{}
variable_results: [['temperature','requested_flow','real_flow','errors','diff']]
gcode:
    # Input parameters
    {% set x1,y1,x2,y2 = (params.AREA|default("0,0,0,0")).split(',')|map('trim')|map('float') %}

    {% set start_flow = params.START_FLOW|default(4)|float %}
    {% set end_flow = params.END_FLOW|default(16)|float %}
    {% set samples = params.FLOW_SAMPLES|default(6)|int %}

    {% set _= vars.update ({
          'fil_dia' : params.FILAMENT_DIAMETER|default(1.75)|float,
          'length' : params.POOP_EXTRUSION|default(200)|float,
          'z_lift' : params.POOP_HEIGHT|default(10)|float,
          'prime_e' : params.PRIME_AMOUNT|default(10)|float,
          'prime_speed' : params.PRIME_SPEED|default(15)|float * 60,
          'wipe_l' : params.WIPE_LENGTH|default(9)|float,
          'travel_speed' : params.TRAVEL_SPEED|default(printer['gcode_macro _User_Variables'].travel_speed|default(100))|float * 60,
          'z_speed' : params.Z_SPEED|default(10)|float * 60,
          'drop_down_alert' : params.DROPDOWN_ALERT|default(5)|float,
          'abort_on_dropdown' : True if params.ABORT_ON_DROPDOWN|default('True')|lower == 'true' else False,
          'temperatures' : (params.TEMPERATURES|default('240,220,200')).split(',')|map('trim')|map('float')|sort(True)|list,
          'retract_l' : params.RETRACTION_LENGTH|default(1)|float,
          'retract_speed' : params.RETRACTION_SPEED|default(60)|float * 60,
          'flow_spacing' : params.FLOW_SPACING|default(44)|float,
          'temperature_spacing' : params.TEMPERATURE_SPACING|default(44)|float}) %}
    ## Restore Encoder calibration value or use ERCF encoder value
    {% set encoder_calib = printer['save_variables'].variables.encoder_calibration|default({'std_dev' : 0, 'average' :0 , 'ratio' : 1 , 'range' : 0}) %}
    SET_GCODE_VARIABLE MACRO=_encoder_pos VARIABLE=calib VALUE='{encoder_calib|tojson|string}'
    

    ## compute variables
    {% set inc = (end_flow - start_flow)/(samples-1) %}
    {% set flows =[] %}
    {% for s in range(samples) %}
        {% set _= flows.append(start_flow + s*inc) %}
    {% endfor %}
    {% if x1 == 0 and x2 == 0 and y1 == 0 and y2 == 0 %}
      {% set x1 = printer["configfile"].config.stepper_x.position_min|default(0)|float + 15 %}
      {% set x2 = printer["configfile"].config.stepper_x.position_max|float - 15 - vars.wipe_l*2 %}
      {% set y1 = printer["configfile"].config.stepper_y.position_min|default(0)|float + 15 + vars.wipe_l/2 %}
      {% set y2 = printer["configfile"].config.stepper_y.position_max|float - 15 - vars.wipe_l/2 %}
    {% endif %}

    ## Check if bed is large enough for so many poops
    {% set max_x = x1 + vars.temperatures|length * (vars.wipe_l + vars.temperature_spacing) %}
    {% set max_y = y1 + samples * vars.flow_spacing %}
    {% if max_x > x2 or max_y > y2 %}
        {action_raise_error("ERPG : Not enough space to produce poopies, requested(%s,%s), max(%s,%s)" % (max_x,max_y,x2,y2))}
    {% endif %}
    
    {action_respond_info("ERPG : running MAX_FLOW_CALIBRATION\n"
                        + "Press Emergency stop if you want to interrupt the calibration\n"
                        + "Temperatures : %s.\n" % vars.temperatures|sort(True)|join(', ')
                        + "Flows : %s." % flows|join(', '))}

    SAVE_GCODE_STATE ID=_MAX_FLOW
    # start g-gode (assume printer is homed, qgl and bed is heated)
    SET_PRESSURE_ADVANCE ADVANCE=0
    SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0

    M221 S100
    M83
    G92 E0
  
    {% for temp in vars.temperatures|sort(True) %}
        {% if loop.index > 1 %}
          G91
          G0 X{vars.temperature_spacing} F{vars.travel_speed}
          G90
          G0 Y{y1}
        {%else %}
          G90
          G0 X{x1} Y{y1} F{vars.travel_speed}
        {% endif %}
        M109 S{temp}
        _max_flow_enable
        {% for i in range(samples) %}
            _max_flow_test TEMPERATURE={temp} FLOW={(start_flow + i * inc)}{" NOTLASTLOOP=True" if not loop.last else ""}
        {% endfor %}

    {% endfor %}
    _max_flow_end
    RESTORE_GCODE_STATE ID=_MAX_FLOW
## MAX_FLOW_CALIBRATION_RESULTS
[gcode_macro MAX_FLOW_CALIBRATION_RESULTS]
gcode:
    {% set _results = printer['gcode_macro MAX_FLOW_CALIBRATION'].results %}
    {% set val = [] %}
    {% for a in _results %}
        {% set _= val.append(a|join(' , ')) %}
    {% endfor %}
    {action_respond_info(val|join('\n')) }

## ENCODER_CALIBRATE
#  encoder should be calibrate to ensure repetablity and accuracy of measurement
#  It does not change the calibration of ERCF
[gcode_macro ENCODER_CALIBRATE]
variable_length: 200
gcode:
  {% if params.VALIDATE|default('False')|lower != 'true' %}
  {action_respond_info("BEWARE ! Before using ENCODER_CALIBRATE you should :\n"
                       " - remove your Toolhead to let filament go freely inside the extruder.\n"
                       " - In order to calibrate at room temperature set the min_extrude_temp of your "
                       "[extruder] section at the same value than min_temp.\n"
                       " - Be sure to have [save_variables] section configured.\n"
                       " - Load enough filament (at least 1m) through the Encoder or Filament motion sensor"
                       "til the extruder.\n\n"
                       "When those steps are done run ENCODER_CALIBRATE VALIDATE=True from "
                       "Klipper console. Result will be store in [save_variables] file\n"
                       "\nThis calibration WILL NOT change calibration of your ERCF\n"
                       "the output value will only be used by MAX_FLOW_CALIBRATION")}
  {% else %}
  {action_respond_info("Running ENCODER_CALIBRATE\n"
                       " - the filament will run several times through the extruder\n"
                       " to determine calibration factor, variance and standard deviation of the encoder.\n"
                       " If Std deviation > 1.0 you should improve the reliability of your motion sensor or \n"
                       " reduce the bowden length.\n"
                       " Press Emergency stop if you want to interrupt the calibration\n"
                       "\nThis calibration WILL NOT change calibration of your ERCF\n"
                       "the output values will only be used by MAX_FLOW_CALIBRATION")}
    SAVE_GCODE_STATE ID=encoder_calibrate_state
    SET_PRESSURE_ADVANCE ADVANCE=0
    SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0

    M221 S100
    M83
    G92 E0
    G4 P2000
    {% for i in range(10) %}
      G0 E30 F1500
      M400
      _encoder_pos ACTION=reset
      _max_flow_extrude LENGTH={length} FLOW=30
      _encoder_pos ACTION=pos
      _encoder_calibrate PASS={i} LENGTH={length}
      _max_flow_extrude LENGTH=-{length + 30 } FLOW=60
    {% endfor %}
    _encoder_calibrate COMPUTE=True LENGTH={length}
    RESTORE_GCODE_STATE ID=encoder_calibrate_state
  {% endif %}

#######################################################################
## Internal macros Do not edit and do not use the below macros alone ##
#######################################################################

## Store or reset encoder position
[gcode_macro _encoder_pos]
variable_vars: {'encoder_pos':0, 'last_val':0}
variable_calib: {'std_dev' : 0, 'average' :0 , 'ratio' : 1 , 'range' : 0}
variable_enable: True
variable_dropdown : 0.90
gcode:
  {% set pos = printer['ercf'].encoder_pos %}
  {% if params.ACTION == 'reset' %}
      {% set _= vars.update({'encoder_pos' : 0, 'last_val': pos }) %}
  {% elif params.ACTION == 'pos' and pos != vars.last_val %}
      {% set delta = pos - vars.last_val %}
      {% set _= vars.update({'encoder_pos' : vars.encoder_pos + delta, 'last_val': pos }) %}
  {% endif %}

## Reset encoder_pos stored values
[gcode_macro _max_flow_end]
gcode:
  {action_respond_info("ERPG : MAX_FLOW_CALIBRATION done ! ")}
  SET_GCODE_VARIABLE MACRO=_encoder_pos VARIABLE=vars VALUE='{{'encoder_pos':0, 'last_val':0, 'calib' :0}|tojson|string}'

## encoder_calibration callback
[gcode_macro _encoder_calibrate]
variable_test : []
gcode:
  {% if params.PASS|default(-1)|int > -1 %}
    {% set _= test.append(printer['gcode_macro _encoder_pos'].vars.encoder_pos|float) %}
    {action_respond_info("%s : measure length %s" % (params.PASS,printer['gcode_macro _encoder_pos'].vars.encoder_pos)) }
    SET_GCODE_VARIABLE MACRO=_encoder_calibrate VARIABLE=test VALUE='{test}'
  {% elif params.COMPUTE|default('False')|lower == 'true' %}
    {% set ns = {'ratio':0,'variance':0} %}
    {% set _= ns.update({'variance': (test|max - test|min)|float}) %}
    {% for t in test %}
      {% set _= ns.update({'tot': ns.tot|default(0)|float + t}) %}
      {% if loop.last %}
        {% set _= ns.update({'average': ns.tot/(test|length)}) %}
        {% set _= ns.update({'ratio': params.LENGTH|default(200)|float/ns.average}) %}
        {% set _= ns.pop('tot') %}
      {% endif %} 
    {% endfor %}
    {% for t in test %}
       {% set _= ns.update({'std_dev': ns.std_dev|default(0)|float + (t-ns.average)**2}) %} 
       {% if loop.last %}
          {% set _= ns.update({'std_dev': (ns.std_dev/(test|length))**0.5 }) %}
       {% endif %}
    {% endfor %}
    {action_respond_info("ENCODER_CALIBRATE results are saved.\n"
                            + "Number of samples : %s\n" % test|length
                            + "Average : %s mm\n" % ns.average
                            + "Calibration ratio : %.5f\n" % ns.ratio
                            + "Range : %s mm\n" % ns.variance
                            + "Standard deviation : %s" % ns.std_dev)}    
    SAVE_VARIABLE VARIABLE=encoder_calibration VALUE='{ns|tojson|string}'
    SET_GCODE_VARIABLE MACRO=_encoder_calibrate VARIABLE=test VALUE='[]'
  {% endif %}

## max_flow_calibration callback
# generate a poop, measure filament extruded
[gcode_macro _max_flow_test]
variable_enable: True
gcode:
    {% set _vars = printer['gcode_macro MAX_FLOW_CALIBRATION'].vars %}
    {% if enable %}
        G90
        G0 Z0.3 F{_vars.z_speed}
        _max_flow_purge
        G91
       {action_respond_info("ERPG : Target flow %s at %sdeg C" % (params.FLOW, params.TEMPERATURE) )}
        M400
        _encoder_pos ACTION=reset
        _long_extrude FLOW={params.FLOW} LENGTH={_vars.length} Z_LIFT={_vars.z_lift}
        _encoder_pos ACTION=pos LENGTH={_vars.length} TARGET_FLOW={params.FLOW}
        M400
        _max_flow_check FLOW={params.FLOW} TEMPERATURE={params.TEMPERATURE}
        G0 E-{_vars.retract_l} F{_vars.retract_speed}
        {% if params.NOTLASTLOOP %}
          G0 X-{_vars.wipe_l} Y{_vars.flow_spacing}  F{_vars.travel_speed}
        {% endif %}
    {% endif %}

## max_flow_test callback
# read encoder, apply calibration, compare to drop down target
[gcode_macro _max_flow_check]
gcode:
    {% set _vars = printer['gcode_macro MAX_FLOW_CALIBRATION'].vars %}
    {% set _results = printer['gcode_macro MAX_FLOW_CALIBRATION'].results %}
    {% set _enc = printer['gcode_macro _encoder_pos'].vars %}
    {% set _calib = printer['gcode_macro _encoder_pos'].calib %}
    {% set real_flow = params.FLOW|float * _enc.encoder_pos * _calib.ratio / _vars.length  %}
    {% set dd = (params.FLOW|float - real_flow)*100/params.FLOW|float %}
    {% set dev = real_flow * _calib.std_dev / _enc.encoder_pos  %}
    
    {action_respond_info("Requested flow %.3f mm^3/s - " % params.FLOW|float
                        +"Real flow %.3f mm^3/s +/- %.3f - " % (real_flow,dev)
                        +"Difference : %.3f%%" % (0-dd))}
    {% set _= _results.append([params.TEMPERATURE|float,params.FLOW|float,real_flow,dev,0-dd]) %}
    SET_GCODE_VARIABLE MACRO=MAX_FLOW_CALIBRATION VARIABLE=results VALUE="{_results}"

    {% if _vars.drop_down_alert < dd %}
      {action_respond_info("Flow drop down is greater than %.3f%%" % (_vars.drop_down_alert))}
      {%if _vars.abort_on_dropdown %}
          SET_GCODE_VARIABLE MACRO=_max_flow_test VARIABLE=enable VALUE=False
      {% endif %}
    {% endif %}

## max_flow_enbale wrapper
#
[gcode_macro _max_flow_enable]
gcode:
  SET_GCODE_VARIABLE MACRO=_max_flow_test VARIABLE=enable VALUE=True

## max_flow_test callback
# purge before mesurement
[gcode_macro _max_flow_purge]
gcode:
    {% set _vars = printer['gcode_macro MAX_FLOW_CALIBRATION'].vars %}
    {% set dx = _vars.wipe_l %}
    {% set dy = 0.86603 * dx %}
    G91
    G0 X{dx/2} Y{dy} E{_vars.prime_e/6} F{_vars.prime_speed}
    G0 X{dx} E{_vars.prime_e/6} F{_vars.prime_speed}
    G0 X{dx/2} Y-{dy} E{_vars.prime_e/6} F{_vars.prime_speed}
    G0 X-{dx/2} Y-{dy} E{_vars.prime_e/6} F{_vars.prime_speed}
    G0 X-{dx} E{_vars.prime_e/6} F{_vars.prime_speed}
    G0 X-{dx/2} Y{dy} E{_vars.prime_e/6} F{_vars.prime_speed}
    G90
  G0 X{printer.toolhead.position.x + _vars.wipe_l} F{_vars.travel_speed}

## Tool function to extrude longer than max_extrude_only_distance
[gcode_macro _long_extrude]
gcode:
    {% set _vars = printer['gcode_macro MAX_FLOW_CALIBRATION'].vars %}
    {% set _max_e_length = printer["configfile"].config.extruder.max_extrude_only_distance|default(50)|float / 2 %}
    {% set _flow = params.FLOW|default(20)|float %}
    {% set _length = params.LENGTH|default(0)|float %}
    {% set _way = '-' if _length < 0 else '' %}
    {% set _length = _length|abs %}

    {% set _z_lift = params.Z_LIFT|default(0)|float %}
    {% set _speed = (_z_lift if _z_lift != 0 else _length) 
                    * _flow * 60
                    / (_length * (_vars.fil_dia|default(1.75)/2)**2 * 3.15157) %}
    
    {% set _nb = (_length / _max_e_length)|int %}
    {% set _z_by_mme = _z_lift / _length %}
   
    {% if _length != 0 %}
         M400
        {% for n in range(_nb) %}
          G0 Z{(_z_by_mme*_max_e_length)} E{_way}{_max_e_length} F{_speed}
        {% endfor %}
        {% if _length > (_nb)*_max_e_length %}
          G0 Z{(_z_by_mme*(_length - _nb * _max_e_length))} E{_way}{_length - _nb * _max_e_length} F{_speed}
        {% endif %}
         M400
    {% endif %}