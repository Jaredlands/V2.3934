## Two part print Start
# Allow to drive somme action on the printer during SOAK_delay when called from Virtual_sdcard
# @version: 1.1

[gcode_macro PRINT_START]
variable_print_pending: False   ## Pending start during SOAK (idea from Falcon14141)
variable_filament: {}
variable_ps_params: {}
gcode:
    ##  disable previous _PRINT_END_DELAYED
      UPDATE_DELAYED_GCODE ID=_PRINT_END_DELAYED DURATION=0
      UPDATE_DELAYED_GCODE ID=_STOP_FILTER_DELAYED DURATION=0
      CLEAR_PAUSE
      BED_MESH_CLEAR

      RESPOND_VERBOSE MSG="Initialize filament"
    ## Init material from DB or Fail
    {% set _fil = printer['gcode_macro _FILAMENT'] %}
    {% set filament = printer.save_variables.variables['db_filament'][params.MATERIAL | default('default') | upper] | default(_fil.filament) %}  ## Fix material not update when MATERIAL call in print start
      FILAMENT NAME={params.MATERIAL if not filament.name is defined else filament.name}
      M400 #

    ## Update parameters fron args
    {% set _= filament.update({'bed_temp' : params.BED_TEMP | default(filament.bed_temp) | float}) %}
    {% set _= filament.update({'extruder_temp' : params.EXTRUDER_TEMP | default(filament.extruder_temp) | float}) %}
    {% set _= filament.update({'chamber_temp' : params.CHAMBER_TEMP | default(filament.chamber_temp) | float}) %}
    {% set _= filament.update({'soak_delay' : params.SOAK | default(filament.soak_delay) | float}) %}

    ## Store filament for _PRINT_START_DELAYED
      SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=filament VALUE='{ filament|tojson|string }'
      SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=ps_params VALUE='{ params|tojson|string }'
      SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=print_pending VALUE=True

    ## Preheat chamber
    {% if 'chamber_temp' not in _fil.unused %}
      _RESPOND VERBOSE=True MSG="Preheat chamber if needed"
      M141 S{filament.chamber_temp}  ; dummy command that set exhaust_fan controlled temperature
    {% endif %}

    ## Start filter
    {% if 'filter_speed' not in _fil.unused %}
      _RESPOND VERBOSE=True MSG="{"Start filter at %s%%" % (filament.filter_speed | default(0)*100 | int) }"
      SET_FAN_SPEED FAN=filter SPEED={ filament.filter_speed | default(0) }
    {% endif %}

    ## Preheat Bed
      _RESPOND VERBOSE=True MSG="Preheat bed"
      M140 S{filament.bed_temp}
      _RESPOND VERBOSE=True MSG="Wait bed temp reached"
      TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={filament.bed_temp}
      M400

    ## Entering Soak, different behavior wether Print_start is called from File/Macro
    ## To be continued ...
    {% if filament.soak_delay > 0 %}
      _RESPOND MSG="{"Entering soak for %s min." % filament.soak_delay }"

    {% endif %}

    {% if printer.virtual_sdcard.is_active == True %}
      _RESPOND MSG="Use ABORT_SOAK to go further"
      UPDATE_DELAYED_GCODE ID=_PRINT_START_DELAYED DURATION={filament.soak_delay*60 + 0.5}
      PAUSE_BASE
    {% else %}
      _RESPOND MSG="Unable to interact with printer during SOAK"
      G4 P{filament.soak_delay * 60 * 1000}
      _PRINT_START_PART2
    {% endif %}

[gcode_macro ABORT_SOAK]
gcode:
    UPDATE_DELAYED_GCODE ID=_PRINT_START_DELAYED DURATION=0.1

[delayed_gcode _PRINT_START_DELAYED]
gcode:
    {% set _ps_vars = printer['gcode_macro PRINT_START'] %}
    {% if _ps_vars.print_pending %}
      RESUME_BASE
      _PRINT_START_PART2
    {% endif %}

[gcode_macro _PRINT_START_PART2]
gcode:

    ## Welcome to the second part of the Print_start
    ## restore variables
    {% set _ps_vars = printer['gcode_macro PRINT_START'] %}

    {% if _vars.print_pending %}

      SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=print_pending VALUE=False

    ## Wait for bed to reach temperature
      _RESPOND VERBOSE=True MSG="Wait Bed Temp to stabilize"
      M190 S{_ps_vars.filament.bed_temp | int}

    ## Wait for chamber to reach start_temperature
      _RESPOND VERBOSE=True MSG='{"Wait Chamber Temp to stabilize at %s" % _ps_vars.filament.chamber_min_temp | default(0) }'
      M191 S{_vars.filament.chamber_min_temp | default(0) | int}  ; dummy command that wait until exhaust_fan sensor temperature is reached

    ## Wait for extruder to reach temperature
      _RESPOND VERBOSE=True MSG="Wait Extruder Temp"
      M104 S{ (_ps_vars.filament.extruder_temp|float) | int}
      M109 S{ (_ps_vars.filament.extruder_temp|float) | int}

    ## Homing all Axis if not
      {% if "xyz" not in printer.toolhead.homed_axes %} G28 {% else %} G28 Z {% endif %}
      _RESPOND VERBOSE=True MSG="Quad gantry Leveling ... "
      QUAD_GANTRY_LEVEL

    ## Clean the nozzle on brush
      NOZZLE_WIPE PURGE=FALSE

    ## Compute besh mesh for _PRINT_START_DELAYED
      COMPUTE_MESH_PARAMETERS SIZE={_ps_vars.ps_params.SIZE | default("0_0_0_0")}
      M400

    ## Calibrate_Z
      G28 Z
      ATTACH_PROBE_LOCK
      CALIBRATE_Z

    ## Bed Mesh leveling
      _RESPOND VERBOSE=True MSG="Adaptive bed mesh"
      ADAPTIVE_BED_MESH
      DOCK_PROBE_UNLOCK
      PARK

    ## Absolute motion mode
      G90

    ## Adjust z_offset
      {% if _ps_vars.filament.z_adjust %}
          SET_GCODE_OFFSET Z_ADJUST={_ps_vars.filament.z_adjust|float}
      {% endif %}

    ## Push Filament to the nozzle (assume it was in cooling tube)
      PRESSURE_NOZZLE

    ## Do purge line
      PRIME_LINE

    ## Alert that print start
      SONG_SINGLE_BEEP
    {% endif %}
