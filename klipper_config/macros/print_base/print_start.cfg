## Two parts print Start
# Allow to drive some actions on the printer during SOAK_delay (only when called from Virtual_sdcard)
# @version: 1.4

[gcode_macro PRINT_START]
variable_print_pending: False   ## Pending start during SOAK (idea from Falcon14141)
variable_filament: {}
variable_ps_params: {}
gcode:
      _RESPOND MSG="PRINT_START launched !"

    SAVE_GCODE_STATE NAME=STATE_PRINT_START
  ##  disable previous _PRINT_END_DELAYED
      UPDATE_DELAYED_GCODE ID=_PRINT_END_DELAYED DURATION=0
      UPDATE_DELAYED_GCODE ID=_STOP_FILTER_DELAYED DURATION=0
      CLEAR_PAUSE
      BED_MESH_CLEAR

      _RESPOND STATE=busy VERBOSE=True MSG="Init filament from DB"
    

  # 1 # Init material from DB or Fail (FILAMENT macro must be called before Print start)
    {% set _fil = printer['gcode_macro _FILAMENT'] %}
    {% set filament = _fil.filament %}
      _RESPOND MSG="Filament loaded {filament.name}"

  ## Override DB_FILAMENT parameters from args (BED_TEMP, EXTRUDER_TEMP, CHAMBER_TEMP, ... )
  # name of each parameters can be found in ../helpers/db_filament.cfg
    {% for param in filament if param != 'name' %}
        {% set _= filament.update({param : params[param|upper] | default(filament[param]) | float}) %}
    {% endfor %}


  # 2 # Store variables for _PRINT_START_DELAYED
      SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=filament VALUE='{ filament|tojson|string }'
      SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=ps_params VALUE='{ params|tojson|string }'
      SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=print_pending VALUE=True


  # 3 # Start filter
    {% if 'filter_speed' not in _fil.unused and filament.filter_speed > 0 %}
      _RESPOND VERBOSE=True MSG="Start filter"
      SET_FAN_SPEED FAN=filter SPEED=1
    {% endif %}


  # 4 # Preheat Bed
      _RESPOND STATE=heating VERBOSE=True MSG="Preheat bed"
      M140 S{filament.bed_temp}

    SAVE_GCODE_STATE NAME=STATE_PRINT_START2

  # 5 # Preheat chamber
    {% if 'chamber_temp' not in _fil.unused %}
      _RESPOND VERBOSE=True MSG="Cooling chamber if needed"
      M191 R{filament.chamber_temp}  ; dummy command that set exhaust_fan controlled temperature
    {% endif %}


  # 6 # Heat soak, different behaviors wether Print_start is called from File or Macro
  # Heat soak will end wether soak_delay or bed_power stability is reached
    {% if printer.virtual_sdcard.is_active == True %}
  # from file: put the printer in pause mode, let you interact with print or interrupt soak
      {% if filament.soak_delay > 0 %}
        _RESPOND MSG="{"Entering soak for max. %s min ." % filament.soak_delay }"
        _RESPOND VERBOSE=True MSG="or wait bed power is stabilized"
        _RESPOND MSG="Use RESUME to go further"
      {% endif %}
      
      _bed_power  # Experimental : Interrupt soak delay when bed power is stabilized
      UPDATE_DELAYED_GCODE ID=_PRINT_START_DELAYED DURATION={filament.soak_delay*60 + 0.5}
      PAUSE_BASE
    
    {% else %}
  # from macro: unable to interact except M112    
      {% if filament.soak_delay > 0 %}
        _RESPOND MSG="{"Entering soak for max. %s  min." % (filament.soak_delay)  }"
        _RESPOND VERBOSE=True MSG="or wait bed power is stabilized"
        _RESPOND MSG="Unable to interact with printer during SOAK"
      {% endif %}
      _RESPOND VERBOSE=True MSG="Wait bed temp stabilize"
      {% for t in range((filament.soak_delay * 60/printer['gcode_macro _bed_power'].interval)|int) %}
        _bed_power ASYNC=False # Experimental : Interrupt soak delay when bed power is stabilized (Async mode off)
      {% endfor %}
      _bed_power_reset ALL=True
      _PRINT_START_PART2

    {% endif %}

  ## To be continued ...

[delayed_gcode _PRINT_START_DELAYED]
gcode:
    {% set _ps_vars = printer['gcode_macro PRINT_START'] %}
    {% if _ps_vars.print_pending %}
      UPDATE_DELAYED_GCODE ID=_bed_power_delayed DURATION=0 # Stop bed_power check
      RESUME_BASE
      _PRINT_START_PART2
    {% endif %}

[gcode_macro _PRINT_START_PART2]
gcode:
    ## Welcome to the second part of the Print_start
    # 7 # restore printer state and variables
    RESTORE_GCODE_STATE NAME=STATE_PRINT_START2

    {% set _ps_vars = printer['gcode_macro PRINT_START'] %}
    {% set _fil = printer['gcode_macro _FILAMENT'] %}

    {% if _ps_vars.print_pending %}

      SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=print_pending VALUE=False
    
    # 8 # Wait for bed to reach temperature
      _RESPOND STATE=heating VERBOSE=True MSG="Wait Bed Temp to stabilize"
      M190 S{_ps_vars.filament.bed_temp | int}

    # 9 # Wait for chamber to reach start_temperature
      _RESPOND MSG='{"Wait Chamber Temp to reach %s" % _ps_vars.filament.chamber_min_temp | default(0) }'
      M191 S{_ps_vars.filament.chamber_min_temp | default(0) | int}  ; dummy command that wait until chamber sensor temperature is reached    
      _RESPOND VERBOSE=True MSG="{"Set filter at %s%%" % (_ps_vars.filament.filter_speed | default(0)*100 | int) }"

    # 10 # Wait for extruder to reach temperature
      _RESPOND VERBOSE=True MSG="Wait Extruder Temp"
      M104 S{ (_ps_vars.filament.extruder_temp|float) | int}
      M109 S{ (_ps_vars.filament.extruder_temp|float) | int}
    
    # 11 # Set filter
      {% if 'filter_speed' not in _fil.unused %}
        _RESPOND VERBOSE=True MSG="Set filter at {_ps_vars.filament.filter_speed | default(0) } "
        SET_FAN_SPEED FAN=filter SPEED={ _ps_vars.filament.filter_speed | default(0) }
      {% endif %}

      _RESPOND STATE=printing MSG="End of Heat soak !"
    
    # 12 # Turn lights on
      CASELIGHT_ON VALUE=0.3
      SET_NOZZLE_LIGHT VALUE=0.3 
    
    # 13 # Homing all Axis if not and align gantry
      {% if "xyz" not in printer.toolhead.homed_axes %} G28 {% else %} G28 Z {% endif %}
      QUAD_GANTRY_LEVEL

    # 14 # Clean the nozzle on brush
      NOZZLE_WIPE

    # 16 # Calibrate_Z
      G28 Z
      ATTACH_PROBE_LOCK
      CALIBRATE_Z

    # 15 # Leveling
      COMPUTE_MESH_PARAMETERS SIZE={_ps_vars.ps_params.SIZE | default("0_0_0_0")}
      M400

      _RESPOND VERBOSE=True MSG="Adaptive bed mesh"
      ADAPTIVE_BED_MESH
      DOCK_PROBE_UNLOCK
      PARK

    ## Absolute motion mode
      G90

    # 16 # Adjust z_offset
      {% if 'z_adjust' not in _fil.unused %}
          SET_GCODE_OFFSET Z_ADJUST={_ps_vars.filament.z_adjust|float}
      {% endif %}

    # 17 # Push Filament to the nozzle (assume it was in cooling tube)
      _RESPOND MSG="Push filament into Nozzle"
      PRESSURE_NOZZLE

    # 18 # Do purge line
      _RESPOND MSG="Do Prime line"
      PRIME_LINE

    ## Alert that print start
      SONG_SINGLE_BEEP

    ## Set nozzle_light timeout
      SET_NOZZLE_LIGHT TIMEOUT=5  # 5 minutes is enough to check first layer
    
      _RESPOND STATE=printing MSG="Start to print !"
    {% endif %}
