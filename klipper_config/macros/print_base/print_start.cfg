## Two parts print Start
# Allow to drive some actions on the printer during SOAK_delay (only when called from Virtual_sdcard)
# @version: 1.2

[gcode_macro PRINT_START]
variable_print_pending: False   ## Pending start during SOAK (idea from Falcon14141)
variable_filament: {}
variable_ps_params: {}
gcode:
      _RESPOND MSG="PRINT_START launched !"

    SAVE_GCODE_STATE NAME=STATE_PRINT_START
    ##  disable previous _PRINT_END_DELAYED
      UPDATE_DELAYED_GCODE ID=_PRINT_END_DELAYED DURATION=0
      UPDATE_DELAYED_GCODE ID=_STOP_FILTER_DELAYED DURATION=0
      CLEAR_PAUSE
      BED_MESH_CLEAR

      _RESPOND STATE=busy VERBOSE=True MSG="Init filament from DB"
    ## Init material from DB or Fail (FILAMENT must be called before Print start)
    {% set _fil = printer['gcode_macro _FILAMENT'] %}
    {% set filament = _fil.filament %}
      _RESPOND MSG="Filament loaded {filament.name}"

    ## Override DB_FILAMENT parameters from args (BED_TEMP, EXTRUDER_TEMP, CHAMBER_TEMP, ... )
    {% for param in filament if param != 'name' %}
        {% set _= filament.update({param : params[param|upper] | default(filament[param]) | float}) %}
    {% endfor %}

    ## Store variables for _PRINT_START_DELAYED
      SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=filament VALUE='{ filament|tojson|string }'
      SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=ps_params VALUE='{ params|tojson|string }'
      SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=print_pending VALUE=True

    ## Preheat chamber
    {% if 'chamber_temp' not in _fil.unused %}
      _RESPOND VERBOSE=True MSG="Cooling chamber if needed"
      M191 R{filament.chamber_temp}  ; dummy command that set exhaust_fan controlled temperature
    {% endif %}

    ## Start filter
    {% if 'filter_speed' not in _fil.unused and filament.filter.speed > 0 %}
      _RESPOND VERBOSE=True MSG="Start filter"
      SET_FAN_SPEED FAN=filter SPEED=1
    {% endif %}

    ## Preheat Bed
      _RESPOND STATE=heating VERBOSE=True MSG="Preheat bed"
      M140 S{filament.bed_temp}
      _RESPOND VERBOSE=True MSG="Wait bed temp stabilize"
      M400
    SAVE_GCODE_STATE NAME=STATE_PRINT_START2
    ## Entering Soak, different behavior wether Print_start is called from File/Macro
    ## To be continued ...
    {% if printer.virtual_sdcard.is_active == True %}
      _bed_power  # Experimental : Check if bed heater is stabilized and interrupt heat_soak
      {% if filament.soak_delay > 0 %}
        _RESPOND MSG="{"Entering soak for %s min." % filament.soak_delay }"
        _RESPOND STATE=printing MSG="Use RESUME to go further"
      {% endif %}
      UPDATE_DELAYED_GCODE ID=_PRINT_START_DELAYED DURATION={filament.soak_delay*60 + 0.5}
      PAUSE_BASE
    
    {% else %}
      TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={filament.bed_temp}
      {% if filament.soak_delay > 0 %}
        _RESPOND MSG="{"Entering soak for %s to %s min." % (filament.soak_delay,filament.soak_delay+10)  }"
        _RESPOND STATE=printing  MSG="Unable to interact with printer during SOAK"
      {% endif %}
      G4 P{filament.soak_delay * 60 * 1000}
      _PRINT_START_PART2
    {% endif %}

[delayed_gcode _PRINT_START_DELAYED]
gcode:
    {% set _ps_vars = printer['gcode_macro PRINT_START'] %}
    {% if _ps_vars.print_pending %}
      RESUME_BASE
      _PRINT_START_PART2
    {% endif %}

[gcode_macro _PRINT_START_PART2]
gcode:
    ## Welcome to the second part of the Print_start
    ## restore variables
    RESTORE_GCODE_STATE NAME=STATE_PRINT_START2

    {% set _ps_vars = printer['gcode_macro PRINT_START'] %}
    {% set _fil = printer['gcode_macro _FILAMENT'] %}

    {% if _ps_vars.print_pending %}

      SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=print_pending VALUE=False

    ## Wait for bed to reach temperature
      _RESPOND STATE=heating VERBOSE=True MSG="Wait Bed Temp to stabilize"
      M190 S{_ps_vars.filament.bed_temp | int}

    ## Wait for chamber to reach start_temperature
      _RESPOND MSG='{"Wait Chamber Temp to reach %s" % _ps_vars.filament.chamber_min_temp | default(0) }'
      M191 S{_ps_vars.filament.chamber_min_temp | default(0) | int}  ; dummy command that wait until chamber sensor temperature is reached    
      _RESPOND VERBOSE=True MSG="{"Set filter at %s%%" % (_ps_vars.filament.filter_speed | default(0)*100 | int) }"
      {% if 'filter_speed' not in _fil.unused %}
        SET_FAN_SPEED FAN=filter SPEED={ _ps_vars.filament.filter_speed | default(0) }
      {% endif %}
      _RESPOND MSG="End of Heat soak !"

    ## Wait for extruder to reach temperature
      _RESPOND VERBOSE=True MSG="Wait Extruder Temp"
      M104 S{ (_ps_vars.filament.extruder_temp|float) | int}
      M109 S{ (_ps_vars.filament.extruder_temp|float) | int}

    ## Homing all Axis if not
      {% if "xyz" not in printer.toolhead.homed_axes %} G28 {% else %} G28 Z {% endif %}
      QUAD_GANTRY_LEVEL

    ## Clean the nozzle on brush
      NOZZLE_WIPE

    ## Compute besh mesh for _PRINT_START_DELAYED
      COMPUTE_MESH_PARAMETERS SIZE={_ps_vars.ps_params.SIZE | default("0_0_0_0")}
      M400

    ## Calibrate_Z
      G28 Z
      ATTACH_PROBE_LOCK
      CALIBRATE_Z

    ## Bed Mesh leveling
      _RESPOND VERBOSE=True MSG="Adaptive bed mesh"
      ADAPTIVE_BED_MESH
      DOCK_PROBE_UNLOCK
      PARK

    ## Absolute motion mode
      G90

    ## Adjust z_offset
      {% if 'z_adjust' not in _fil.unused %}
          SET_GCODE_OFFSET Z_ADJUST={_ps_vars.filament.z_adjust|float}
      {% endif %}

    ## Push Filament to the nozzle (assume it was in cooling tube)
      _RESPOND MSG="Push filament into Nozzle"
      PRESSURE_NOZZLE

    ## Do purge line
      _RESPOND MSG="Do Prime line"
      PRIME_LINE

    ## Alert that print start
      SONG_SINGLE_BEEP
      _RESPOND STATE=printing MSG="Start to print !"
    {% endif %}
