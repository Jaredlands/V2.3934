##-----------------------------------------------------------------------------#
# Material management macros for klipper
#------------------------------------------------------------------------------#
# @version:1.1

# macros used to store useful parameters for material and
#  and recall it at startup
# author: fbeauKmi (discord: fboc#1751)
 
# changelog : 
#    V1.0 : initial release
#    V1.1 : improve MATERIAL_QUERY, Clean 'name' attribute
#    
 
# Requirement : [save_variables] section must be configure and "material",
# "material[s]{,1}" should NOT be used for other purpose
# [firmware_retraction] could be used

# Macros :
#  _MATERIAL   : Variables
#  DB_MATERIAL : manage datas concerning materials
#  MATERIAL    : Apply  pressure_advance, extrude_factor, retraction parameters
#                to the printer. Don't need to tweak your slicers profile.
#                ATTENTION  : If you plan to use 'extrude_factor' BE SURE that 
#                extrusion multiplier is set to 1 in your Slicers.
#  MATERIAL_QUERY  : Display material infos from DB
#  _MATERIAL_APPLY : (internal use) Set printer with settings (PA, EF, Retraction)
#  _PRINTER_DISPLAY_SETTING : (internal use) for verbose mode
#  _MATERIAL_INIT : Startup code, init _MATERIAL
#  _DB_MATERIAL_CLEAN : For v1.01 to v1.1 migration

# Datas are stored in a json array :
#  - name = name of material, only Alphanumeric characters are allowed
#  all others datas are float
#  - bed_temp
#  - extruder_temp
#  - chamber_temp
#  - pressure_advance
#  - extrude_factor
#  - retract_length
#  - retract_speed
#  - unretract_extra_length
#  - unretract_speed
#  - soak_delay
#  - nevermore
#  You can add your own parameters as it respect naming  
#  (lowercase alpha and _) and the value can be stored as float.
# -----------------------------------------------------------------------------# 
  
## Variables for MATERIAL Macros
#  - default_material = used to init new material settings
#  - material  =  store current material settings can be call by any macros
#  like PRINT_START, PRINT_END, NOZZLE_WIPE, ...
#  Usage eg {% set BED_TEMP = printer["gcode_macro _MATERIAL"].material.bed_temp %}
#  - use_extrude_factor (boolean) (Apply extrude_factor if true)
#  - use_pressure_advance (boolean) (Apply pressure_advance if true)
#
[gcode_macro _MATERIAL]
## default settings
variable_default_material : {'name' : 'default',  ## DO NOT CHANGE THIS LINE
      'bed_temp' : 90,
      'extruder_temp' : 250,
      'chamber_temp' : 60,
      'pressure_advance' : 0.04,
      'extrude_factor': 0.93,
      'retract_length' : 0.5,
      'retract_speed' : 40,
      'unretract_extra_length' : 0,
      'unretract_speed' : 40,
      'soak_delay' : 10,
      'nevermore' : 1}

variable_material: {}
variable_use_extrude_factor : True
variable_use_pressure_advance : True
variable_verbose: False
gcode:

## DB_MATERIAL
# save/update/del material datas in file
# Usage :
#   DB_MATERIAL ADD=<material_name> <SETTING_1>=<val_1> ... <SETTING_n>=<val_n>
#     add or update
#   DB_MATERIAL ADD=<material_name> FROM=<material_name>
#   DB_MATERIAL DEL=<material_name>
#  <SETTINGS> are params from _MATERIAL default_material
#  <vals> are _float_ numbers
#
# if called with unknown Material name, a new material setting is init, missing <SETTINGS> 
# are initialized from MATERIAL default_material otherwise 
#
# KNOWN LIMITATIONS :
# DO NOT put MATERIAL inside PRINT_START, _MATERIAL will be update only after
# the macro full evaluation
# Material name are stored as Uppercase string only.
# Special characters will crash the macro
#
#
[gcode_macro DB_MATERIAL]
description: Store material datas on disk
gcode:
    ## Check [save_variables]
    {% if not printer.save_variables is defined %}
        { action_raise_error("configure [save_variables] first") }
    {% endif %}
    # Can't work without ADD or DEL
    {% if not params.ADD and not params.DEL %}
       { action_raise_error("ADD or DEL param must be set") }
    {% elif params.ADD and params.DEL %}
        { action_raise_error("ADD and DEL can't be used together") }
    {% elif params.FROM and not params.ADD %}
        { action_raise_error("ADD must be if FROM is used") }
    {% endif %}

    {% set name = params.ADD | default(params.DEL) | upper %}
    
     # Load variables from _MATERIAL
    {% set _vars = printer["gcode_macro _MATERIAL"] %}
    
    # get stored datas for <NAME> or initialize array  
    {% set materials = printer.save_variables.variables["materials"] | default({}) %}
    {% set material = materials[name] | default({}) %}
    {% set current_material = _vars.material.name | default('none') | string %}

    {% if params.FROM %}
      {% set material = materials[params.FROM | upper].copy() | default({'err' : 1}) %}
      {% if material.err == 1 %}
        { action_raise_error("%s is not in DB - cannot copy it" % params.FROM | upper) }
      {% endif %}
    {% endif %}

    {%if params.DEL %}
     ## DELETE MATERIAL
      {% if name in materials %}
        {% set _dummy = materials.pop(name) %}
        { action_respond_info("%s removed successfully from DB" % name) }
      {% else %}
        { action_respond_info("WARNING : %s does not present in DB" % name) }
      {% endif %}

    {% else %}
    ## ADD or UPDATE MATERIAL
      ## Update array if new  ##
      {% set _dummy = materials.update({name : material}) %}

      {% if material | length == 0 %}
           { action_respond_info("Set material settings for %s" % name) }
      {% else %}
           { action_respond_info("Update material settings for %s" % name) }
      {% endif %}    

      ## Update/Set new values from settings ##
      {% for param in params %}
          {% if param in ['ADD','FROM','DEL',''] %}
          {% elif param | lower in _vars.default_material %}
            {% set _dummy = material.update({param | lower:params[param] | float}) %}
          {% else %} # if param | length %}  ## bug fix : remove empty param
             { action_respond_info("WARNING : %s is not a valid setting" % param | upper) }
          {% endif %}
      {% endfor %}

    {% endif %}

    ## Store in file 
    SAVE_VARIABLE VARIABLE=materials VALUE='{ materials|tojson|string }'

    ## Update new settings to current config or load default if DEL##
    {% if material.name == current_material %}
        MATERIAL NAME={material.name}
    {% endif %}

## MATERIAL
#
#  Get/set/list material
# Usage:
#  MATERIAL              (show settings of current material)
#  MATERIAL NAME=<name>  (change material to <name>, apply settings to printer)
[gcode_macro MATERIAL]
description: Get/set current material
gcode:
    ## Check [save_variables]
    {% if not printer.save_variables is defined %}
      { action_raise_error("configure [save_variables] first!") }
    {% endif %}

    {% if params.ADD or params.DEL or params.FROM %}
      { action_respond_info("WARNING: you should try with DB_MATERIAL instead") }
    
    {% else %}
      {% set MATERIAL = params.NAME | upper %}
      {% set DEFAULT_SETTINGS = printer["gcode_macro _MATERIAL"].default_material | default({}) %}
      {% set OLD_MATERIAL = printer["gcode_macro _MATERIAL"].material.name %}
          
      {% if MATERIAL %}
      ## Get stored material settings or default if unset
        {% set materials = printer.save_variables.variables["materials"] | default({}) %}
        {% set SETTINGS = materials[MATERIAL] | default({'err' : 1}) %}
        {% for s in DEFAULT_SETTINGS %}
            {% set _dummy = SETTINGS.update({s :  SETTINGS[s] | default(DEFAULT_SETTINGS[s])}) %}
        {% endfor %}
        {% if SETTINGS.err == 1 %}
            { action_respond_info("WARNING : No settings for %s material. Use DB_MATERIAL to configure it" % params.NAME|string)  }
            { action_raise_error("Aborting Material change") }
        {% else %}
            {% set _dummy = SETTINGS.update({'name' : MATERIAL}) %}
        {% endif %}
        {action_respond_info("Set material to %s%s" % (SETTINGS.name," (previously %s)" % OLD_MATERIAL if OLD_MATERIAL else '')) }
  
        SET_GCODE_VARIABLE MACRO=_MATERIAL VARIABLE=material VALUE='{ SETTINGS|tojson|string }'
        { 'UPDATE_VARIABLE' if printer["gcode_macro UPDATE_VARIABLE"] is defined else 'SAVE_VARIABLE' } VARIABLE=material VALUE='"{SETTINGS.name}"'
        M400 #Empty queue before evaluate next command
        _MATERIAL_APPLY  

      {% else %}
      ## Display current settings
            MATERIAL_QUERY NAME={printer["gcode_macro _MATERIAL"].material.name | default('default')}    
      {% endif %}
    {% endif %}

## MATERIAL_QUERY
# display store settings
# Usage :
#    MATERIAL_QUERY
#    MATERIAL_QUERY NAME=<material_name> 
[gcode_macro MATERIAL_QUERY]
description: display settings of request material
gcode:
    ## Check [save_variables]
    {% if not printer.save_variables is defined %}
        { action_raise_error("configure [save_variables] first !") }
    {% endif %}

    ## Read stored settings
    {% set _materials = printer.save_variables.variables["materials"] | default({}) %}
    
    {% if params.NAME is defined %}
    ## Display stored settings for NAME
      {% set SETTINGS = _materials[params.NAME | upper] | default (False) %}
      {% set DEFAULT_SETTINGS = printer["gcode_macro _MATERIAL"].default_material | default({}) %}
  
      {% if SETTINGS %}
        {% set output_txt = ["Settings for %s:" % params.NAME | upper] %}
        ## Sort settings by key 
        {% for p, _default_value in DEFAULT_SETTINGS | dictsort(False) %}         
            {% set _dummy = output_txt.append("_ %s : %s" % (p , SETTINGS[p] | default("%s (default)" % _default_value))) %}
        {% endfor %}
        { action_respond_info(output_txt | join('\n')) }
      {% else %}
        { action_respond_info("WARNING : No settings for %s" % params.NAME | upper) }
      {% endif %}
    {% else %}
     ## List available materials and display settings  ##
      {% set output_txt= [" Available materials :\n{"] %}
      {% for m, vals in  _materials|dictsort(false) %}
        {% set _dummy = output_txt.append("'%s' : %s" % (m, vals)) %}
      {% endfor %}
      { action_respond_info("%s \n}" % output_txt | join('\n'))  }

    {% endif %}

## _MATERIAL_APPLY
# for internal use
# apply settings to the printer:
#    pressure_advance
#    extrude_factor
#    retraction
[gcode_macro _MATERIAL_APPLY]
gcode:
    {% set _vars = printer["gcode_macro _MATERIAL"] %}
    {% set SETTINGS = _vars.material %}
    {% if SETTINGS.name is defined %}

        {% if _vars.verbose %}
           { action_respond_info("Apply settings for %s" % SETTINGS.name | string) }
        {% endif %}
          
        ## Apply Pressure_Advance
        {% if _vars.use_pressure_advance %}
          SET_PRESSURE_ADVANCE ADVANCE={SETTINGS.pressure_advance}
        {% endif %}

        ## Apply Extrude_factor
        {% if _vars.use_extrude_factor %}
          M221 S{SETTINGS.extrude_factor|default(1)|float *100}
          {% if _vars.verbose %}
            M400  #Empty queue before evaluate next command
            _PRINTER_DISPLAY_SETTING VARIABLE=extrude_factor
          {% endif %}
        {% endif %}

        ## Apply firmware_retraction
        {% if 'firmware_retraction' in printer.configfile.settings %}
          SET_RETRACTION RETRACT_LENGTH={SETTINGS.retract_length} RETRACT_SPEED={SETTINGS.retract_speed}
          SET_RETRACTION UNRETRACT_EXTRA_LENGTH={SETTINGS.unretract_extra_length} UNRETRACT_SPEED={SETTINGS.unretract_speed}
          {% if _vars.verbose %}
            M400  #Empty queue before evaluate next command
            {% for p in SETTINGS if 'retract_' in p %}
                  _PRINTER_DISPLAY_SETTING VARIABLE={p} LIBRARY=firmware_retraction
            {% endfor %}
          {% endif %}

        {% endif %}    
    {% else %}
        { action_raise_error("No material settings loaded ! check your config")  }
    {% endif %}

## _MATERIAL_DISPLAY_SETTING
#  for internal use only
#  display setting
#  it's externally called to ensure data update 
#  Use M400 before
[gcode_macro _PRINTER_DISPLAY_SETTING]
gcode:
    {% set variable = params.VARIABLE %}
    {% set library = params.LIBRARY|default("gcode_move")|lower %}
    {% if variable %}
      {action_respond_info(" %s : %s" % (variable,printer[library][variable]|default("Unknown data"))) }
    {% endif %}
      
## _INIT_MATERIAL
# restore MATERIAL at startup
[delayed_gcode _INIT_MATERIAL]
initial_duration : 1
gcode:
    {% set MATERIAL = printer.save_variables.variables["material"]|default(0) %}
    {% if MATERIAL %}
          MATERIAL NAME={MATERIAL}
    {% endif %}

## _DB_MATERIAL_CLEAN
# Clean file 
[gcode_macro _DB_MATERIAL_CLEAN]
gcode:
    {% set materials = printer.save_variables.variables["materials"] | default({}) %}
    {% for key in materials %}
      {% if materials[key].name is defined %}
        {% set _dummy = materials[key].pop('name') | default(0) %}
      {% endif %}
    {% endfor %}
    SAVE_VARIABLE VARIABLE=materials VALUE='{ materials|tojson|string }'
