##-----------------------------------------------------------------------------#
# Material management macros for klipper
#------------------------------------------------------------------------------#
# @version:1.2

# macros used to store useful parameters for filament and
#  and recall it at startup
# author: fbeauKmi (discord: fboc#1751)

# changelog :
#    V1.0 : initial release
#    V1.1 : improve MATERIAL_QUERY, Clean 'name' attribute
#    V1.2 : Change names MATERIAL to FILAMENT to avoid misinterpreting the macro, Review internal naming,

# Requirement : [save_variables] section must be configure and "filament",
# "filament[s]{,1}" should NOT be used for other purpose
# [firmware_retraction] could be used

# Macros :
#  _FILAMENT   : Variables
#  DB_FILAMENT : manage datas concerning filaments
#  FILAMENT    : Apply  pressure_advance, extrude_factor, retraction parameters
#                to the printer. Don't need to tweak your slicers profile.
#                ATTENTION  : If you plan to use 'extrude_factor' BE SURE that
#                extrusion multiplier is set to 1 in your Slicers.
#  DB_FILAMENT_QUERY  : Display filament infos from DB
#  _FILAMENT_APPLY : (internal use) Set printer with settings (PA, EF, Retraction)
#  _PRINTER_DISPLAY_SETTING : (internal use) for verbose mode
#  _FILAMENT_INIT : Startup code, init _FILAMENT
#  _DB_MATERIAL_CLEAN : For v1.1 to v1.2 migration

# Datas are stored in a json array :
#  - name = name of filament [string]
#  all others datas are [float]
#  - bed_temp
#  - extruder_temp
#  - chamber_temp
#  - pressure_advance
#  - extrude_factor
#  - retract_length
#  - retract_speed
#  - unretract_extra_length
#  - unretract_speed
#  - soak_delay
#  - filter_speed
#  You can add your own parameters as it respect naming
#  (lowercase alpha and _) and the value can be stored as float.
# -----------------------------------------------------------------------------#

## Variables for FILAMENT Macros
#  - default_filament = used to init new filament settings
#  - filament  =  store current filament settings can be call by any macros
#  like PRINT_START, PRINT_END, NOZZLE_WIPE, ...
#  Usage eg {% set BED_TEMP = printer['gcode_macro _FILAMENT'].filament.bed_temp %}
#  - use_extrude_factor (boolean) (Apply extrude_factor if true)
#  - use_pressure_advance (boolean) (Apply pressure_advance if true)
#
[gcode_macro _FILAMENT]
## default settings
variable_default_filament : {'name' : 'default'}  ## DO NOT CHANGE THIS LINE
variable_filament: {}
variable_unused : [        # List of unused parameters for debug purpose
      #'pressure_advance',
      #'extrude_factor',
      #'soak_delay',
      #'filter_speed',
      #'z_adjust'
      ]
gcode:

## DB_FILAMENT
# save/update/del filament datas in file
# Usage :
#   DB_FILAMENT NAME=<filament_name> <SETTING_1>=<val_1> ... <SETTING_n>=<val_n>
#     Add or update
#   DB_FILAMENT NAME=<filament_name> FROM=<filament_name>
#     Clone an existing setting
#   DB_FILAMENT DEL=<filament_name>
#  <SETTINGS> are params from _FILAMENT default_filament
#  <vals> are _float_ numbers
#
# if called with unknown Filament name, a new filament setting is init.
# Missing <SETTINGS> are initialized from _FILAMENT default_filament otherwise
#
# KNOWN LIMITATIONS :
# DO NOT put FILAMENT inside PRINT_START, _FILAMENT will be update only after
# the macro full evaluation
# Material name are stored as Uppercase string only.
# Special characters will crash the macro
#
#

[gcode_macro DB_FILAMENT]
description: Helper:Store filament datas in save_variables file
gcode:
    ##  Check [save_variables] First
    {% if not printer.save_variables is defined %}
        { action_raise_error("configure [save_variables] first") }
    {% endif %}
    # Load variables from _FILAMENT
    {% set _fil = printer["gcode_macro _FILAMENT"] %}
    {% set _d = _fil.default_filament %}
     # get stored datas for <NAME> or initialize array
    {% set db_table = printer.save_variables.variables["db_filament"] | default({}) %}

    {% if _d|length <= 1 %}

    ## Only for GUI (Mainsail/Fluidd)
    {% set _= params.NAME %}
    {% set _= params.DEL %}
    {% set _= params.FROM %}

##########################################################################################################
## COMMENT LINE OF UNWANTED SETTINGS, ADD YOUR OWN As you respect syntax below
## These lines are required to intialize default value
#                       Param name lower            =   Param name upper   default value
#                             |                              |                |
#                             V                              V                V
      {% set _=_d.update({  'bed_temp'              : params.BED_TEMP|default(90)|int                }) %}
      {% set _=_d.update({  'extruder_temp'         : params.EXTRUDER_TEMP|default(250)|int          }) %}
      {% set _=_d.update({  'chamber_temp'          : params.CHAMBER_TEMP|default(60)|int            }) %}
      {% set _=_d.update({  'chamber_min_temp'      : params.CHAMBER_MIN_TEMP|default(30)|int        }) %}
      {% set _=_d.update({  'pressure_advance'      : params.PRESSURE_ADVANCE|default(0.04)|float    }) %}
      {% set _=_d.update({  'extrude_factor'        : params.EXTRUDE_FACTOR|default(0.93)|float      }) %}
      {% set _=_d.update({  'retract_length'        : params.RETRACT_LENGTH|default(0.5)|float       }) %}
      {% set _=_d.update({  'retract_speed'         : params.RETRACT_SPEED|default(40)|float         }) %}
      {% set _=_d.update({  'unretract_extra_length': params.UNRETRACT_EXTRA_LENGTH|default(0)|float }) %}
      {% set _=_d.update({  'unretract_speed'       : params.UNRETRACT_SPEED|default(40)|float       }) %}
      {% set _=_d.update({  'soak_delay'            : params.SOAK_DELAY|default(1)|float             }) %}
      {% set _=_d.update({  'filter_speed'          : params.FILTER_SPEED|default(0.5)|float         }) %}
      {% set _=_d.update({  'z_adjust'              : params.Z_ADJUST|default(0)|float               }) %}
#     {% set _=_d.update({  'exhaust_fan_speed'     : params.EXHAUST_FAN_SPEED|default(0)|float      }) %}
#     {% set _=_d.update({  'your_own_param'        : params.YOUR_OWN_PARAM|default(0)|float         }) %}
#
##########################################################################################################


## DO NOT CHANGE BELOW
    ## Initialize default settings (Called at startup)
    _RESPOND VERBOSE=True MSG="Initialize default filament settings"
    SET_GCODE_VARIABLE MACRO=_FILAMENT VARIABLE=default_filament VALUE='{ _d|tojson|string }'
    M400

    # Validate input Params
    {% elif not params.NAME and not params.DEL %}
        _RESPOND MSG="DB_FILAMENT failed : NAME or DEL param must be set"
    {% elif params.NAME and params.DEL %}
        _RESPOND MSG="DB_FILAMENT failed : NAME and DEL can't be used together"
    {% elif params.FROM and not params.NAME %}
        _RESPOND MSG="DB_FILAMENT failed : FROM and NAME must be used together"
    {% else %}

      {% set name = params.NAME | default(params.DEL) | upper %}

      {% set filament = db_table[name] | default({}) %}
      {% set current_name = _fil.filament.name | default('none') | string %}

      {% if params.FROM %}
        {% set filament = db_table[params.FROM | upper].copy() | default({'err' : 1}) %}
        {% if filament.err == 1 %}
          { action_raise_error("%s is not in DB - cannot copy it" % params.FROM | upper) }
        {% endif %}
      {% endif %}

      {%if params.DEL %}
      ## DELETE FILAMENT
        {% if name in db_table %}
          {% set _= db_table.pop(name) %}
          _RESPOND MSG="{"%s removed successfully from DB" % name}"
        {% else %}
          _RESPOND MSG="{"WARNING : %s does not present in DB" % name}"
        {% endif %}

      {% else %}
      ## ADD or UPDATE FILAMENT
        ## Update array : required for new row  ##
        {% set _= db_table.update({name : filament}) %}

        {% if filament | length == 0 %}
             _RESPOND VERBOSE=True MSG="{"Add filament settings for %s" % name }"
        {% else %}
             _RESPOND VERBOSE=True MSG="{"Update filament settings for %s" % name }"
        {% endif %}

        ## Update/Set new values from settings ##
        {% for param in params %}
            {% if param in ['NAME','FROM',''] %}
            {% elif param | lower in _d %}
              {% set _= filament.update({param | lower:params[param] | float}) %}
            {% else %}
               _RESPOND MSG="{"WARNING : %s is not a valid setting" % param | upper }"
            {% endif %}
        {% endfor %}

      {% endif %}

      ## Store in file
      SAVE_VARIABLE VARIABLE=db_filament VALUE='{ db_table|tojson|string }'

      ## Update new settings to current config or load default if DEL##
      {% if name == current_name %}
          FILAMENT NAME={name}
      {% endif %}
    {% endif %}

## FILAMENT
#
#  Get/set/list filament
# Usage:
#  FILAMENT              (show settings of current filament)
#  FILAMENT NAME=<name>  (change filament to <name>, apply settings to printer)
[gcode_macro FILAMENT]
description: Helper:Get/set current filament
gcode:
    ## Load variables
    {% set _fil = printer["gcode_macro _FILAMENT"] %}

    ## Check [save_variables]
    {% if not printer.save_variables is defined %}
      { action_raise_error("configure [save_variables] first!") }
    {% endif %}

    {% if params['DEL'] or params['FROM'] %}
      _RESPOND MSG="{"WARNING: you should try with DB_FILAMENT instead"}"

    {% else %}
      {% set name = params.NAME | upper %}
      {% set _d = _fil.default_filament | default({}) %}
      {% set previous_name = _fil.filament.name | default(False)  %}

      {% if name %}
      ## Get stored filament settings or default if unset
        {% set db_table = printer.save_variables.variables['db_filament'] | default({}) %}
        {% set filament = db_table[name] | default({'err' : 1}) %}
        {% for s in _d %}
            {% set _= filament.update({s :  filament[s] | default(_d[s])}) %}
        {% endfor %}
        {% if filament.err == 1 %}
            _RESPOND MSG="{"WARNING : No settings for %s filament. Use DB_FILAMENT to configure it" % params.NAME|string}"
            { action_raise_error("Aborting Material change") }
        {% else %}
            {% set _= filament.update({'name' : name}) %}
        {% endif %}

        _RESPOND MSG="{"Set filament to %s%s" % (filament.name," (previously %s)" %
                        previous_name if ( previous_name and previous_name != name )  else '')}"

        SET_GCODE_VARIABLE MACRO=_FILAMENT VARIABLE=filament VALUE='{ filament|tojson|string }'
        { 'UPDATE_VARIABLE' if printer['gcode_macro UPDATE_VARIABLE'] is defined else 'SAVE_VARIABLE' } VARIABLE=filament_name VALUE='"{filament.name}"'
        M400 #Empty queue before evaluate next command
        _FILAMENT_APPLY

      {% else %}
      ## Display current settings
        FILAMENT_QUERY NAME={_fil.filament.name | default('default')}
      {% endif %}
    {% endif %}

## FILAMENT_QUERY
# display store settings
# Usage :
#    FILAMENT_QUERY
#    FILAMENT_QUERY NAME=<filament_name>
[gcode_macro FILAMENT_QUERY]
description: Helper:Display settings of request filament
gcode:
    ## Check [save_variables]
    {% if not printer.save_variables is defined %}
        { action_raise_error("configure [save_variables] first !") }
    {% endif %}

    ## Read stored settings
    {% set db_table = printer.save_variables.variables['db_filament'] | default({}) %}

    {% if params.NAME is defined %}
    ## Display stored settings for NAME
      {% set filament = db_table[params.NAME | upper] | default (False) %}
      {% set _d = printer['gcode_macro _FILAMENT'].default_filament | default({}) %}

      {% if filament %}
        {% set output_txt = ["Settings for %s:" % params.NAME | upper] %}
        ## Sort settings by key
        {% for p, _default_value in _d | dictsort(False) %}
            {% set _= output_txt.append("_ %s : %s" % (p , filament[p] | default("%s (default)" % _default_value))) %}
        {% endfor %}
        { action_respond_info(output_txt | join('\n')) }
      {% else %}
        { action_respond_info("WARNING : No settings for %s" % params.NAME | upper) }
      {% endif %}
    {% else %}
     ## List available filaments and display settings  ##
      {% set output_txt= [" Available filaments :\n"] %}
      {% for m, vals in  db_table|dictsort(false) %}
        {% set _= output_txt.append("'%s' : %s" % (m, vals)) %}
      {% endfor %}
      {action_respond_info(output_txt | join('\n')) }

    {% endif %}

## _FILAMENT_APPLY
# for internal use
# apply settings to the printer:
#    pressure_advance
#    extrude_factor
#    retraction
[gcode_macro _FILAMENT_APPLY]
gcode:
    {% set _fil = printer['gcode_macro _FILAMENT'] %}
    {% set _vars = printer['gcode_macro _User_Variables'] %}
    {% set filament = _fil.filament %}
    {% if  filament.name is defined %}

        _RESPOND VERBOSE=true MSG="{"Apply settings for %s" % filament.name | string }"

        ## Apply Pressure_Advance
        {% if 'pressure_advance' not in _fil.unused %}
          SET_PRESSURE_ADVANCE ADVANCE={filament.pressure_advance|float}
        {% endif %}

        ## Apply Extrude_factor
        {% if 'extrude_factor' not in _fil.unused %}
          M221 S{filament.extrude_factor|default(1)|float *100}
          {% if _fil.verbose %}
            M400  #Empty queue before evaluate next command
            _PRINTER_DISPLAY_SETTING VARIABLE=extrude_factor
          {% endif %}
        {% endif %}

        ## Apply firmware_retraction
        {% if 'firmware_retraction' in printer.configfile.settings %}
          SET_RETRACTION RETRACT_LENGTH={filament.retract_length|float} RETRACT_SPEED={filament.retract_speed|float}
          SET_RETRACTION UNRETRACT_EXTRA_LENGTH={filament.unretract_extra_length|float} UNRETRACT_SPEED={filament.unretract_speed|float}
          {% if _vars.verbose %}
            M400  #Empty queue before evaluate next command
            {% for p in filament if 'retract_' in p %}
                  _PRINTER_DISPLAY_SETTING VARIABLE={p} LIBRARY=firmware_retraction
            {% endfor %}
          {% endif %}

        {% endif %}
    {% else %}
        { action_raise_error("No filament settings loaded ! check your config")  }
    {% endif %}

## _FILAMENT_DISPLAY_SETTING
#  for internal use only
#  display setting
#  it's externally called to ensure data update
#  Use M400 before
[gcode_macro _PRINTER_DISPLAY_SETTING]
gcode:
    {% set variable = params.VARIABLE %}
    {% set library = params.LIBRARY|default("gcode_move")|lower %}
    {% if variable %}
      _RESPOND MSG="{" %s : %s" % (variable,printer[library][variable]|default("Unknown data"))}"
    {% endif %}

## _INIT_FILAMENT
# restore FILAMENT at startup
[delayed_gcode _INIT_FILAMENT_DELAYED]
initial_duration : 1
gcode:
    _DB_MATERIAL_MIGRATE
    {% set filament_name = printer.save_variables.variables['filament_name']|default(0) %}
    DB_FILAMENT
    M400
    {% if filament_name %}
          FILAMENT NAME={filament_name}
    {% endif %}

## _DB_MATERIAL_CLEAN
# transition from V1.1 to v1.2
[gcode_macro _DB_MATERIAL_MIGRATE]
gcode:
    {% set _db_filament = printer.save_variables.variables['materials'] %}
    {% set _filament_name = printer.save_variables.variables['material']|default(0) %}
    {% if _db_filament and not  printer.save_variables.variables['db_filament'] %}
        SAVE_VARIABLE VARIABLE=db_filament VALUE='{_db_filament|tojson|string}'
        {% if _current_filament_name %}
          SAVE_VARIABLE VARIABLE=filament_name VALUE='"{_filament_name}"'
        {% endif %}
        _RESPOND MSG="Migration MATERIALS to DB_FILAMENT, you can remove 'material' and 'materials' variables from your SAVE_VARIABLES file"
    {% endif %}

## DEPRECATED macro to be removed
[gcode_macro DB_MATERIAL]
gcode:
    _RESPOND MSG="DB_MATERIAL is deprecated use DB_FILAMENT instead"
    DB_FILAMENT {rawparams}

[gcode_macro MATERIAL]
gcode:
    _RESPOND MSG="MATERIAL is deprecated use FILAMENT instead"
    FILAMENT {rawparams}

[gcode_macro MATERIAL_QUERY]
gcode:
    _RESPOND MSG="MATERIAL_QUERY is deprecated use FILAMENT_QUERY instead"
    FILAMENT_QUERY {rawparams}
