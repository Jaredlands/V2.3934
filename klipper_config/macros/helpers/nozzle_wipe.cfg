[gcode_macro NOZZLE_WIPE]
description: Wipe nozzle
variable_brush : {}
variable_bucket : {}
variable_purge : {}
gcode:
     ## Check variables
      {% set uv = printer["gcode_macro _User_Variables"] %}
      {% set purge= params.PURGE|default(False) %}
      {% if not uv.brush.start %}
          { action_raise_error("Brush variables must be set in _User_Variables") }
      {% endif %}
     
     ## Check temperature 
      {% if not printer.extruder.can_extrude %}
           { action_raise_error("Extruder not hot enough") }
      {% endif %}
     
      {% if "xyz" in printer.toolhead.homed_axes %}
          SAVE_GCODE_STATE NAME=NOZZLE_WIPE_state
          
          {% set leftside = printer.toolhead.axis_minimum.x|float + uv.brush.start + uv.brush.width/2 %}
          {% set rightside = printer.toolhead.axis_maximum.x|float - uv.brush.start + uv.brush.width/2 %}
          {% set x1 = [uv.brush.start - 10,printer.toolhead.axis_minimum.x]|max 
                      if leftside < rightside else 
                      [uv.brush.start+ uv.brush.width + 10, printer.toolhead.axis_maximum.x]|min %}
          {% set x2 = uv.brush.start + uv.brush.width if leftside < rightside else uv.brush.start %}
          {% set y2 =  printer.toolhead.axis_maximum.y - uv.brush.depth/2 %}
          {% set purge_x = x1 - 15 if x1 < x2 else x2 + 15 %}
    
       
       ## Position for wipe. Either left or right of brush based off bucket_pos to avoid unnecessary travel.
          G1 Z{uv.brush.top + uv.brush.clearance_z} F{uv.z_drop_speed*60}
          G1 X{purge_x} Y{printer.toolhead.axis_maximum.y -30} F{uv.travel_speed*60}
          
          G1 Y{printer.toolhead.axis_maximum.y}
    
          {% if printer["gcode_macro PRESSURE_NOZZLE"] is defined and purge %}
            PRESSURE_NOZZLE
          {% endif %}
    
        ## Move nozzle down into brush.
          G1 Z{uv.brush.top} F{uv.z_drop_speed*60}
          {% for wipes in range(1, (uv.brush.wipe_qty*2 + 1)) %}
            G1 X{loop.cycle(x1,x2)} F{uv.travel_speed*30}
          {% endfor %}
          G1 X{(x1 + x2) / 2} F{uv.travel_speed*30}  
          G1 Y{y2} F{uv.travel_speed*30}     
          G1 Z{uv.brush.top + uv.brush.clearance_z} F{uv.z_drop_speed*60}
      
        ## Restore the gcode state to how it was before the macro.
          RESTORE_GCODE_STATE NAME=NOZZLE_WIPE_state
      
      {% else %}
          { action_raise_error("Please home your axes!") }
      {% endif %}    
  
